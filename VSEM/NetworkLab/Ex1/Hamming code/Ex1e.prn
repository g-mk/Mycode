Script started on Wed 10 Aug 2016 11:44:36 AM IST
bash-3.2$ cat sender/out.txt
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int calcTolBit(int);
void computeHamming(int*,int);


#include"hamming.h"
int lookUp[4][8]={{1,3,5,7,9,11,13,15},
                  {2,3,6,7,10,11,14,15},
                  {4,5,6,7,12,13,14,15},
                  {8,9,10,11,12,13,14,15}};
int calcTolBit(int size)
{
    if(size==1)
        return 2+size;
    else if(size <=4)
        return 3+size;
    else if(size<=8)
        return 4+size;
}

void computeHamming(int* transData,int totSize)
{
    int loc,it,in,hamming,flag;
    for(it=1,loc=0;it<totSize;it=pow(2,++loc))
    {
        hamming=0;
        for(in=0;in<8;in++)
        {
            flag = lookUp[loc][in];
            if(flag<=totSize)
                hamming^=transData[flag-1];
        }
        transData[it-1]=hamming;
    }
}
#include"hamming.h"
int main()
{
    int it,size,totSize,*data,*transData,temp=0;
    printf("Enter the Number of bits to be transmited: ");
    scanf("%d",&size);
    data= (int*)malloc(size*sizeof(int));
    totSize=calcTolBit(size);
    transData = (int*)malloc(totSize*sizeof(int));
    for(it=0;it<totSize;it++)
        transData[it]=0;
    printf("Enter the data to transmit: \n");
    for(it=0;it<size;it++)
    {
        scanf("%d",&data[it]);
    }

    for(it=0;it<totSize;it++)
    {
        if((it+1)!=pow(2,temp))
        {
            transData[it]=data[size-1];
            size--;
        }
        else
            temp++;
    }
    computeHamming(transData,totSize);
    printf("Hamming Code Generated for the given data :\n");
    for(it=totSize-1;it>=0;it--)
    {
        printf("%d ",transData[it]);
    }
    printf("\nRedundancy Bits: ");
    for(temp=1;temp<totSize;temp=pow(2,temp))
      printf("%d  ",transData[temp-1]);
    printf("\n");
}
bash-3.2$ ./HammindSender
bash: ./HammindSender: No such file or directory
bash-3.2$ ./HammingSender
Enter the Number of bits to be transmited: 7
Enter the data to transmit: 
1 0 0 1 1 0 1
Hamming Code Generated for the given data :
1 0 0 1 1 1 0 0 1 0 1 
Redundancy Bits: 1  0  0  
bash-3.2$ cat receiver/out.txt
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
int computeHamming(int*,int);
#include"hHamming.h"
int lookUp[4][8]={{1,3,5,7,9,11,13,15},
                  {2,3,6,7,10,11,14,15},
                  {4,5,6,7,12,13,14,15},
                  {8,9,10,11,12,13,14,15}};

int computeHamming(int* transData,int totSize)
{
    int loc,it,in,hamming=0,flag,errorPos=0;
    for(it=1,loc=0;it<totSize;it=pow(2,++loc))
    {
        hamming=0;
        for(in=0;in<8;in++)
        {
            flag = lookUp[loc][in];
            if(flag<=totSize)
                hamming^=transData[flag-1];
        }
        errorPos+=it*hamming;
    }
    return errorPos;
}
#include"hHamming.h"
int main()
{
    int it,size,*data,position;
    printf("Enter the Number of bits received: ");
    scanf("%d",&size);
    data= (int*)malloc(size*sizeof(int));
    printf("\nEnter the data received: \n\n");
    for(it=size-1;it>=0;it--)
    {
        scanf("%d",&data[it]);
    }
    position=computeHamming(data,size);
    if(position==0)
        printf("\n\nNo Error in the data\n\n");
    else
        printf("\n\nError is detected in position %d\n\n",position);
}
bash-3.2$ ./HammingReceiver
Enter the Number of bits received: 10

Enter the data received: 

1 0 0 1 1 0 0 1 0
0


Error is detected in position 8

bash-3.2$ ./HammingReceiver
Enter the Number of bits received: 1 0 0 1 1 1 0 0 1 0 1 

Enter the data received: 



No Error in the data

bash-3.2$ exit
exit

Script done on Wed 10 Aug 2016 11:46:23 AM IST
