Script started on Thu 18 Aug 2016 12:11:16 AM IST
bash-3.2$ cat onePipeV1.c
/*******************************************************************************
**Description   : Deploying the Interprocess Communication for message passing**
**                between two process using pipe() and determining the nxn    **
**                matrix determinant and skew symmetric condition             **
**Author        : N. Guru Manikandan.                                         **
**Date Created  : 14/07/2016.                                                 **
**Version       : 1.1                                                         **
*******************************************************************************/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <math.h>
int** findDetMat(int *temp[],int i,int j,int n)
{
    int k,l,r=0,c=0;
    int **array = (int**)malloc(sizeof(int*)*n);
    for(k=0;k<n;k++)
     array[k]=(int*)malloc(sizeof(int)*n);
    for(k=0;k<n+1;k++)
    {
     for(l=0;l<n+1;l++)
     {
      if((i!=k) && (j!=l))
      {
        array[r][c]=temp[k][l];
        c++;
       }
      if(c>=n)
      {
         r++;
         c=0;
      }
     }
    }
    return array;
}

int determinent(int *array[],int i,int j,int n)
{
    int loop,det=0;
    int **temp;
    if(n==2)
    {
     det = array[0][0]*array[1][1] -array[0][1]*array[1][0];
     return det;
    }
    else if(n==3)
    {
     for(loop=0;loop<n;loop++)
     {
      temp = findDetMat(array,i,loop,n-1);

      det +=(pow(-1,i+j)*array[i][j]*determinent(temp,i,j++,n-1));
     }
     return det;
    }
    else
    {
     for(loop=0;loop<n;loop++)
     {
      temp = findDetMat(array,0,loop,n-1);
      det += pow(-1,i+loop)*array[i][loop]*determinent(temp,0,0,n-1);
     }
     return det;
    }
}

void main()
{
     int pipe1,flag=1,process,i,j,mem[2],size,**array,**skew;
     
     printf("Enter the size of the matrix nXn: ");
     scanf("%d",&size);
     
     array = (int**) malloc(size*sizeof(int*));
     skew = (int**) malloc(size*sizeof(int*));
     
     for(i=0;i<size;i++)
     {
      array[i]=(int*)malloc(size*sizeof(int));
      skew[i]=(int*)malloc(size*sizeof(int));
     }
     
     pipe1=pipe(mem);
     
     if(pipe1==0)
     {
      printf("\nEnter the data one by one:\n");
      for(i=0;i<size;i++)
       for(j=0;j<size;j++)
       {
         printf("Element [%d][%d] : ",i+1,j+1);
         scanf("%d",&array[i][j]);
       }
      
      for(i=0;i<size;i++)
      {
       for(j=0;j<size;j++)
       {
         if(array[i][j]!=-(array[j][i]))
         {
           flag =0;
           break;
         }
       }
      if(!flag)
       break;
     }
    
     if(flag)
      printf("\nSkew Symettric\n\n");
     else
      printf("\nNot a Skew Symettric\n\n");
     
     write(mem[1],&array,sizeof(array));
    
     close(mem[1]);
      
     printf("\nParent writes the matirx\n");
      
     process = fork();
     
     if(process==0)
     {
       printf("\nChild Reads the Matrix\n");
       
       read(mem[0],&skew,sizeof(skew));
 
       close(mem[0]);
 
       printf("\n\nGiven Matrix is : \n\n");
     
       for(i=0;i<size;i++)
       {
        for(j=0;j<size;j++)
         printf("%d\t",skew[i][j]);
 
        printf("\n");
       }
     
       printf("\n\nDeterminent Of the Matrix is: %d\n\n",determinent(skew,0,0,size));
     }
     
    }
    else
     printf("\nPipe Creation Failed\n");
    
    free(array);
}
bash-3.2$ ./V1Pipe
Enter the size of the matrix nXn: 3

Enter the data one by one:
Element [1][1] : 0
Element [1][2] : 1
Element [1][3] : -3
Element [2][1] : -1
Element [2][2] : 0
Element [2][3] : 5
Element [3][1] : 3
Element [3][2] : -5
Element [3][3] : 0

Skew Symettric


Parent writes the matirx

Child Reads the Matrix


Given Matrix is : 

0	1	-3	
-1	0	5	
3	-5	0	


Determinent Of the Matrix is: 0

bash-3.2$ ./V1Pipe
Enter the size of the matrix nXn: 3

Enter the data one by one:
Element [1][1] : 1
Element [1][2] : 5
Element [1][3] : 
6
Element [2][1] : 4
Element [2][2] : 56
Element [2][3] : 5
Element [3][1] : 2
Element [3][2] : 1
Element [3][3] : 5

Not a Skew Symettric


Parent writes the matirx

Child Reads the Matrix


Given Matrix is : 

1	5	6	
4	56	5	
2	1	5	


Determinent Of the Matrix is: -423

bash-3.2$ cat twoPipe.c
#include<stdio.h>
#include<unistd.h>
#include<math.h>
void main()
{
 int fileDes[2],fileDes1[2],pipe1,pipe2,rem,perfectNum,squareNum,temp;
 int div=1,sum=0;
 
 pid_t process;
 
 pipe1=pipe(fileDes);
 pipe2=pipe(fileDes1);
 
 if(pipe1==0&&pipe2==0)
 {
  printf("\n\nPipe Created\n\n");
 
  printf("Enter the Number: ");
  scanf("%d",&perfectNum);
 
  write(fileDes[1],&perfectNum,sizeof(int));
 
  process=fork();
 
  if(process==0)
  {
    printf("\n\nChild Process\n\n");
    printf("\n\nEnter the NUmber to Check the Perfect Square: ");
    scanf("%d",&squareNum);
    
    write(fileDes1[1],&squareNum,sizeof(int));
    
    read(fileDes[0],&perfectNum,sizeof(int));
    
    temp=perfectNum;
    while(temp>div)
    {
      if(temp%div==0)
        sum+=div;
      div++;
    } 
    if(sum==perfectNum)
     printf("\nGiven Number is Perfect Number\n");
    else
     printf("\nGiven Number is Not a Perfect Number\n");
  }
  else
  {
   printf("\n\nParent Process\n\n");
   read(fileDes1[0],&temp,sizeof(int));
   
   squareNum=temp;
   
   temp=sqrt(temp);
   
   if(squareNum==pow(temp,2))
    printf("\n\nGiven Number is Perfect Square\n\n");
   else
    printf("\n\nGiven Number is Not a Perfect Square\n\n");
  } 
 }
 else
  printf("\nPipe Creation Failed\n")  ;
}
bash-3.2$ ./twoPipe


Pipe Created

Enter the Number: 28


Child Process





Parent Process

Enter the NUmber to Check the Perfect Square: 155

Given Number is Perfect Number


Given Number is Not a Perfect Square

bash-3.2$ ./twoPipe


Pipe Created

Enter the Number: 12


Child Process



Parent Process



Enter the NUmber to Check the Perfect Square: 25

Given Number is Not a Perfect Number


Given Number is Perfect Square

bash-3.2$ exit
exit

Script done on Thu 18 Aug 2016 12:13:13 AM IST
