Script started on Sun 01 Nov 2015 03:28:22 PM IST
bash-3.2$ cat hQueue.h
#include <iostream>
#define MAX 7

using namespace std;
class CQueue
{
    private:
        int *cqueue_arr;
        int front, rear;
    public:
        CQueue();
        void Enqueue(int item);
        void Dequeue();
        int isEmpty();
        int ReturnFront();
};
bash-3.2$ cat iQueue.cpp
#include"hQueue.h";
CQueue::CQueue()
{
    cqueue_arr = new int [MAX];
    rear = front = -1;
}
void CQueue::Enqueue(int item)
{
    if ((front == 0 && rear == MAX-1) || (front == rear+1))
        {
            return;
        }
    if (front == -1)
        {
            front = 0;
            rear = 0;
        }
    else
        {
            if (rear == MAX - 1)
                rear = 0;
            else
                rear = rear + 1;
        }
    cqueue_arr[rear] = item ;
}
void CQueue::Dequeue()
{
    if (front == -1)
        {
            return ;
        }
    if (front == rear)
        {
            front = -1;
            rear = -1;
        }
    else
        {
           if (front == MAX - 1)
                front = 0;
            else
                front = front + 1;

        }
}
int CQueue::ReturnFront()
{
    if (front == -1)
        return -1;
    else
        return cqueue_arr[front];
}
int CQueue :: isEmpty()
{
    if(front ==-1)
        return 1;
    else
        return 0;
}
bash-3.2$ cat hGraph.h
#include<iostream>
using namespace std;

class Graph
{
 public:
  Graph();
  Graph(int,int);
  ~Graph();
  int createEdge(int ,int);
  int createRelation(int,int,string);
  int visitVertex(int , void(*fpointer)(int,int,string));
 private:

  int **AdjMatrix;
  string **AdjRelation;
  int Vertex;
  int Edges;
};

bash-3.2$ cat iGraph.cpp
#include"hGraph.h"
#include"hQueue.h"
Graph :: Graph()
{

}

Graph :: Graph(int nVert,int nEdge)
{
 Vertex=nVert;
 Edges=nEdge;
 AdjMatrix = new int*[nVert];
 AdjRelation = new string*[nVert];
 for(int i=0;i<nVert;i++)
 {
  AdjMatrix[i]= new int[nVert];
  AdjRelation[i]= new string[nVert];
 }
 for(int i=0;i<nVert;i++)
  for(int j=0;j<nVert;j++)
  {
   AdjMatrix[i][j]=0;
   AdjRelation[i][j]=" ";
  }
}

Graph :: ~Graph()
{
 for(int i=0;i<Vertex;i++)
  {
   delete []AdjMatrix[i];
   delete []AdjRelation[i];
  }
 delete []AdjMatrix;
 delete []AdjRelation;
}

int Graph :: createEdge(int Vertex1,int Vertex2)
{
 if(AdjMatrix[Vertex1][Vertex2]==0)
  AdjMatrix[Vertex1][Vertex2]=1;
 else
  return 0;
 return 1;
}

int Graph :: createRelation(int Vert1,int Vert2,string relet)
{
 if(AdjRelation[Vert1][Vert2]==" ")
  AdjRelation[Vert1][Vert2]= relet;
 else
  return 0;
 return 1;
}

int Graph :: visitVertex(int vert,void(*fpointer)(int,int,string))
{
    int nFlag=0;
    bool *Visited = new bool[Vertex];
    for(int i=0;i<Vertex;i++)
        Visited[i]=false;
    Visited[vert]=true;
    CQueue q;
    q.Enqueue(vert);
    while(!q.isEmpty())
    {
        vert = q.ReturnFront();
        q.Dequeue();
        for(int w=0;(w<Vertex);w++)
        {
            if(AdjMatrix[vert][w]&&!Visited[w])
            {
                nFlag=1;
                fpointer(vert,w,AdjRelation[vert][w]);
                q.Enqueue(w);
                Visited[w]=true;
            }
        }

    }
    delete []Visited;
    return nFlag;
}

bash-3.2$ cat iGraph.cpp
#include"hGraph.h"
void visit(int vert1,int vert2,string relation)
{
    cout<<vert1+1<<" -> "<<vert2+1<<" Relation is: "<<relation<<endl;
}

int main()
{
    int nVertex,nEdges;
    int nVert1,nVert2;
    int nStatusE,nStatusR;
    string sRelation;
    cout<<"\nEnter the No.of Vertex: ";
    cin>>nVertex;
    cout<<"\nEnter the No. of Edges: ";
    cin>>nEdges;
    Graph g(nVertex,nEdges);
    cout<<"\nEnter the Vertex No. who has the Edge:\n";
    for(int i=0;i<nEdges;i++)
    {
        cout<<"\nEnter the Two Vertex which has the Edge between them: \n";
        cout<<"\nVertex 1:";
        cin>>nVert1;
        cout<<"\nVertex 2:";
        cin>>nVert2;
        cout<<"\nEnter the Relation Between Them:";
        cin>>sRelation;
        nStatusE=g.createEdge(nVert1-1,nVert2-1);
        nStatusR=g.createRelation(nVert1-1,nVert2-1,sRelation);
        if(nStatusE&&nStatusR)
            cout<<"\nEdge has been Created between Vertex "<<nVert1<<" and Vertex "<<nVert2<<".\n";
        else
        {
           i--;
            cout<<"\nAlready there is an Edge.\n\n";
        }
    }
    while(nStatusE!=0)
    {
        cout<<"\nEnter the Stating Vertex:";
        cin>>nVertex;
        nStatusR=g.visitVertex(nVertex-1,visit);
        if(nStatusR==0)
            cout<<"\n No Adjacent Vertex for the given Vertex \n";
        cout<<"\nPress 1 to Continue BFT with Some other Vertex: ";
        cin>>nStatusE;
    }
    cout<<"\n\nThank You\n\n";
}
bash-3.2$ ./Graph

Enter the No.of Vertex: 4

Enter the No. of Edges: 4

Enter the Vertex No. who has the Edge:

Enter the Two Vertex which has the Edge between them: 

Vertex 1:1

Vertex 2:2

Enter the Relation Between Them:Son

Edge has been Created between Vertex 1 and Vertex 2.

Enter the Two Vertex which has the Edge between them: 

Vertex 1:1

Vertex 2:3

Enter the Relation Between Them:Daughter

Edge has been Created between Vertex 1 and Vertex 3.

Enter the Two Vertex which has the Edge between them: 

Vertex 1:2

Vertex 2:4

Enter the Relation Between Them:Studying

Edge has been Created between Vertex 2 and Vertex 4.

Enter the Two Vertex which has the Edge between them: 

Vertex 1:3

Vertex 2:4

Enter the Relation Between Them:Studying

Edge has been Created between Vertex 3 and Vertex 4.

Enter the Stating Vertex:1
1 -> 2 Relation is: Son
1 -> 3 Relation is: Daughter
2 -> 4 Relation is: Studying

Press 1 to Continue BFT with Some other Vertex: 1

Enter the Stating Vertex:2
2 -> 4 Relation is: Studying

Press 1 to Continue BFT with Some other Vertex: 1

Enter the Stating Vertex:4

 No Adjacent Vertex for the given Vertex 

Press 1 to Continue BFT with Some other Vertex: 0


Thank You

bash-3.2$ exit
exit

Script done on Sun 01 Nov 2015 03:31:10 PM IST
