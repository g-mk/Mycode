Script started on Sun 01 Nov 2015 03:45:10 PM IST
bash-3.2$ cat hHash.h
#include<iostream>
#include<string.h>
using namespace std;
typedef struct Info
{
    char CommandName[20];
    char CommandSyntax[25];
    char CommandDetails[25];
    char CommandType[15];
}Info;

class Node
{
    friend class HashTable;
 private:
 Info info;
 Node* pNext;
};

class HashTable
{
 public:
   HashTable();
   HashTable(int num);
   int hash(Info);
   int insert(Info);
   Node * find(Info,int (*fpointer)(Info,Info));
   void displayTable(void (*fpointer)(Info));
 private:
   Node** Bucket;
   int NoOfBuckets;
};
bash-3.2$ cat iHash.cpp
#include"hHash.h"
HashTable :: HashTable()
{

}

HashTable :: HashTable(int num )
{
 Bucket = new Node*[num];
 for(int i=0;i<num;i++)
    Bucket[i]=NULL;
 NoOfBuckets=num;
}

int HashTable :: hash(Info info)
{
 if(info.CommandName[0]>=97)
  return (info.CommandName[0]-97);
 else
  return (info.CommandName[0]-65);
}

int HashTable :: insert(Info info)
{
 int loc = hash(info);
 Node *newnode = new Node;
 newnode->info= info;
 newnode->pNext=NULL;
 if(!Bucket[loc])
    Bucket[loc]=newnode;
 else
 {
    newnode->pNext=Bucket[loc];
    Bucket[loc] = newnode;
 }
 return 1;
}

Node* HashTable :: find (Info info,int (*fpointer)(Info,Info))
{
 int loc = hash(info);
 Node* current = Bucket[loc];
 while(current)
 {
  if(fpointer(info,current->info))
   return current;
  current = current->pNext;
 }
 return NULL;
}

void HashTable :: displayTable(void (*fpointer)(Info))
{
    Node* current;
    for(int i=0;i<NoOfBuckets;i++)
    {
        current = Bucket[i];
        while(current)
        {
            fpointer(current->info);
            current=current->pNext;
        }
    }
}

bash-3.2$ cat iHash.cpp
#include"hHash.h"
void dispInfo(Info info)
{
 cout<<"\nCommand Name : "<<info.CommandName;
 cout<<"\nSyntax: "<<info.CommandSyntax;
 cout<<"\nType: "<<info.CommandType;
 cout<<"\nDescription: "<<info.CommandDetails<<endl;
}

int stringCompare(Info info1,Info info2)
{
  if(strcmp(info1.CommandName,info2.CommandName)==0)
    return 1;
  else
    return 0;
}

Info GetInfo()
{
  Info info;
 cout<<"\nCommand Name: ";
 cin>>info.CommandName;
 cout<<"\nCommand Syntax: ";
 cin>>info.CommandSyntax;
 cout<<"\nCommand Type: ";
 cin>>info.CommandType;
 cout<<"\nCommand Description: ";
 cin>>info.CommandDetails;
 return(info);
}
main()
{
    int nCount;
    int nControl,nStatus;
    Info info;
    Node *retNode;
    cout<<"Enter the No. of Bucket:";
    cin>>nCount;
    HashTable hashtable(nCount);
    do
    {
        cout<<"\nEnter the Choice:\n1.Insert.\n2.Find.\n3.Display.\n4.Exit.\nOption:";
        cin>>nControl;
        switch(nControl)
        {
        case 1:
            cout<<"\nEnter the Command Details\n";
            info = GetInfo();
            nStatus=hashtable.insert(info);
            if(nStatus==1)
                {
                    cout<<"\nInfo is Inserted in the Hash Table\n";
                }
            else
                cout<<"\nInfo is not Inserted in the Hash Table\n";
            break;
        case 2:
            cout<<"\nEnter the name of the Command: ";
            cin>>info.CommandName;
            retNode=hashtable.find(info,stringCompare);
            if(retNode)
                {
                    cout<<"\n\n****************Node Found******************\n\n";
                }
            else
                cout<<"\n\nNode with the Give Command Name not Found\n\n";
            break;
        case 3:
            cout<<"\nContent in the Hash Table:\n";
            hashtable.displayTable(dispInfo);
            break;
        case 4:
            cout<<"\n********************Thank You******************\n";
            break;
        default:
            cout<<"\nInvalid Option\n";
        }
    }while(nControl!=4);
}
bash-3.2$ ./Hash
Enter the No. of Bucket:26

Enter the Choice:
1.Insert.
2.Find.
3.Display.
4.Exit.
Option:1

Enter the Command Details

Command Name: cp

Command Syntax: cp<source.<destination>

Command Type: file

Command Description: to_copy_a_file

Info is Inserted in the Hash Table

Enter the Choice:
1.Insert.
2.Find.
3.Display.
4.Exit.
Option:1

Enter the Command Details

Command Name: rm

Command Syntax: rm<file_name>

Command Type: file

Command Description: to_remove_file

Info is Inserted in the Hash Table

Enter the Choice:
1.Insert.
2.Find.
3.Display.
4.Exit.
Option:1

Enter the Command Details

Command Name: rmdir<dir>

Command Syntax: rmdir<dir_name>

Command Type: file

Command Description: to_remove_dir

Info is Inserted in the Hash Table

Enter the Choice:
1.Insert.
2.Find.
3.Display.
4.Exit.
Option:3

Content in the Hash Table:

Command Name : cp
Syntax: cp<source.<destination>
Type: file
Description: to_copy_a_file

Command Name : rmdir<dir>
Syntax: rmdir<dir_name>
Type: file
Description: to_remove_dir

Command Name : rm
Syntax: rm<file_name>
Type: file
Description: to_remove_file

Enter the Choice:
1.Insert.
2.Find.
3.Display.
4.Exit.
Option:2

Enter the name of the Command: cp


****************Node Found******************


Enter the Choice:
1.Insert.
2.Find.
3.Display.
4.Exit.
Option:2

Enter the name of the Command: logout


Node with the Give Command Name not Found


Enter the Choice:
1.Insert.
2.Find.
3.Display.
4.Exit.
Option:4

********************Thank You******************
bash-3.2$ exit
exit

Script done on Sun 01 Nov 2015 03:48:06 PM IST
