Script started on Wed 30 Sep 2015 03:28:38 PM IST
bash-3.2$ cat hSet.h
#include<iostream>
#include<string.h>
using namespace std;
namespace HistoryOfCommands
{
 typedef struct Info
 {
  char CommandName[20];
  char CommandSyntax[25];
  char CommandDetails[25];
  char CommandType[8];
 }Info;

/* typedef struct RetInfo
 {
  Info info;
  int nStatus;
 }RetInfo;*/

 class Node
 {
  public:
       friend class SET;
  private:
       Node* LeftChild;
       Node* RightChild;
       Info info;
 };

 class SET
 {
  public:
      SET();
      ~SET();
      Node * CreateNode();
      int InsertSET(Node*);
      Node* DeleteSET(char *,Node*);
      int SearchSET(Node*,char *);
      Node* FindMin(Node*);
      Node* FindMax(Node*);
      void Inorder(Node*);
      void Preorder(Node*);
      void Postorder(Node*);
      void Display(Node*);
      Info GetInfo();
      Node * GetRoot();
      int IsEmpty();
      void Union(Node* current);
   private:
      Node* root;
 };
}
bash-3.2$ cat iSet.cpp
#include"hSet.h"
using namespace HistoryOfCommands;
SET :: SET()
{
 root = NULL;
}
SET :: ~SET()
{
 /*while(root)
  {
   DeleteBST(root->info.CommandName,root);
  }*/
}
int SET :: InsertSET(Node* newnode)
{
 Node* Current=root;
 Node* CCurrent=NULL;
 while(Current)
 {
  CCurrent=Current;
  if(strcmp(newnode->info.CommandName,Current->info.CommandName)<0)
   Current=Current->LeftChild;
  else if(strcmp(newnode->info.CommandName,Current->info.CommandName)>0)
   Current=Current->RightChild;
  else
   return -1;
 }
 if(root)
  {

 if(strcmp(newnode->info.CommandName,CCurrent->info.CommandName)<0)
    {

        CCurrent -> LeftChild = newnode;
    }
   else
   {
       CCurrent -> RightChild = newnode;
   }
  }
 else
  root=newnode;
  return 1;
}

int SET :: SearchSET(Node* Current ,char *name)
{
 if(IsEmpty())
    return 0;
 if(!Current)
   return -1;
 else if (strcmp(name,Current->info.CommandName)==0)
   return 1;
 else if(strcmp(name,Current->info.CommandName)<0)
   return SearchSET(Current->LeftChild,name);
 else
   return SearchSET(Current->RightChild,name);
}

void SET::Display(Node* Current)
{
 cout<<"\nCommand Name : "<<Current->info.CommandName;
 cout<<"\nSyntax: "<<Current->info.CommandSyntax;
 cout<<"\nType: "<<Current->info.CommandType;
 cout<<"\nDescription: "<<Current->info.CommandDetails<<endl;
}

Node* SET::DeleteSET(char * name,Node *current)
{
 Node* returnNode = new Node;
 if(current==NULL)
 {
  return NULL;
 }
 else
 {
     if(root->LeftChild==NULL&&root->RightChild==NULL)
     {
         delete root;
         root=NULL;
         return returnNode;
     }

  if(strcmp(name,current->info.CommandName)<0)
   current->LeftChild=DeleteSET(name,current->LeftChild);
  else if(strcmp(name,current->info.CommandName)>0)
   current->RightChild=DeleteSET(name,current->RightChild);
  else
  {
   Node *temp;
   if(current->LeftChild && current->RightChild)
   {
    temp=FindMin(current->RightChild);
    current->info=temp->info;
    current->RightChild=DeleteSET(current->info.CommandName,current->RightChild);
    //return current;
   }
   else
   {
    temp=current;
    if(current->LeftChild==NULL)
     current=current->RightChild;
    else
     current=current->LeftChild;
     /*returnNode->info= temp->info;
     returnNode->LeftChild=temp->LeftChild;
     returnNode->RightChild=temp->RightChild;*/
     //return current;
   }
  }
  return current;
 }
 return NULL;
}

void SET::Inorder(Node *current)
{
 if(current)
 {
  Inorder(current->LeftChild);
  Display(current);
  Inorder(current->RightChild);
 }
// else
 // return NULL;
}
void SET::Preorder(Node *current)
{
 if(current)
 {
  Display(current);
  Preorder(current->LeftChild);
  Preorder(current->RightChild);
 }
}
void SET::Postorder(Node *current)
{
 if(current)
 {
  Postorder(current->LeftChild);
  Postorder(current->RightChild);
  Display(current);
 }
}

Node* SET :: FindMax(Node *current)
{
 if(current -> RightChild==NULL)
   return current;
 else
  return FindMax(current->RightChild);
}

Node* SET :: FindMin(Node *current)
{
 if(current -> LeftChild==NULL)
   return current;
 else
  return FindMin(current->LeftChild);
}

Info SET:: GetInfo()
{
  Info info;
 cout<<"\nCommand Name: ";
 cin>>info.CommandName;
 cout<<"\nCommand Syntax: ";
 cin>>info.CommandSyntax;
 cout<<"\nCommand Type: ";
 cin>>info.CommandType;
 cout<<"\nCommand Description: ";
 cin>>info.CommandDetails;
 return(info);
}

Node* SET :: GetRoot()
{
    return root;
}
int SET :: IsEmpty()
{
 if(root==NULL)
   return 1;
 else
   return 0;
}

Node* SET :: CreateNode()
{
    Node* newnode = new Node;
    newnode->info=GetInfo();
    newnode->LeftChild=NULL;
    newnode->RightChild=NULL;
    return newnode;
}
void SET::Union(Node *current)
{
 if(current)
 {
  InsertSET(current);
  Union(current->LeftChild);
  Union(current->RightChild);
 }
}

bash-3.2$ cat aSet.cpp
#include"hSet.h"
using namespace HistoryOfCommands;
int main()
{
 SET aTree,bTree,cTree;
 int nStatus,nChoice;
 char cControl;
 Info info;
 cout<<"\n*****************SET OPERATIONS****************\n";
 cout<<"\nGive inputs for SET A: \n";
 do
  {
   cout<<"\nElements in Tree A : \n";
   Node *newNode;
   newNode = aTree.CreateNode();
   if(newNode)
   {
    nStatus = aTree.InsertSET(newNode);
    if(nStatus==1)
    {
     cout<<"\n******Node Has been inserted Succesfully*********\n";
    }
    else if (nStatus==-1)
        cout<<"Duplicate Element...\n";
    else
     cout<<"\n***********Node Has NOT been Inserted**************\n";
   }
   else
    cout<<"\n************MEMORY ERROR**************\n";
  cout<<"Press Y to CONTINUE or Press N to STOP: ";
  cin>>cControl;
  }while(cControl == 'Y' || cControl == 'y');
 aTree.Inorder(aTree.GetRoot());

 cout<<"\nGive inputs for SET B: \n";
 do
  {
   cout<<"\nElements in Tree B : \n";
   Node *newNode;
   newNode = bTree.CreateNode();
   if(newNode)
   {
    nStatus = bTree.InsertSET(newNode);
    if(nStatus==1)
     {
       cout<<"\n******Node Has been inserted Succesfully*********\n";
     }
    else if (nStatus==-1)
        cout<<"Duplicate Element...\n";
    else
     cout<<"\n***********Node Has NOT been Inserted**************\n";
   }
   else
    cout<<"\n************MEMORY ERROR**************\n";
  cout<<"Press Y to CONTINUE or Press N to STOP: ";
  cin>>cControl;
  }while(cControl == 'Y' || cControl == 'y');
 bTree.Preorder(bTree.GetRoot());
 cout<<"\n*****************Union Operation************\n";
 do
 {
  cout<<"\n1.To Perform Union Operation.\n2.Find in Union Tree.\n"
       <<"3.Inorder Traversal.\n4.PreorderTraversal.\n5.PostOrder.\n6.Exit.\n";
  cin>>nChoice;
 switch(nChoice)
 {
  case 1:
    if(!cTree.GetRoot())
    {
     cTree.Union(aTree.GetRoot());
     cTree.Union(bTree.GetRoot());
     cout<<"\n*************Union Operation Done***********\n";
    }
    else if(cTree.GetRoot()==NULL)
     cout<<"\n*************Union Operation Unsuccesfull*********\n";
    else
     cout<<"\n***Union Operation Alredy Done Continue with Some Other Operations****\n";
    break;
  case 2:
    if(cTree.GetRoot())
    {
     cout<<"Name of the Command to search: ";
     cin>>info.CommandName;
     nStatus=cTree.SearchSET(cTree.GetRoot(),info.CommandName);
     if(nStatus==1)
      cout<<"\n*******Node Found with the give Command*******\n";
     else if(nStatus==-1)
      cout<<"\n**************Node Not Found***********\n";
     else
      cout<<"\n*************Tree is Empty*************\n";
    }
    else
      cout<<"\n*********Union is Not Performed*********\n";
     break;
  case 3:
   if(!cTree.IsEmpty())
    {
     cout<<"\n************Inorder Travesal**********\n";
     cTree.Inorder(cTree.GetRoot());
    }
   else
    cout<<"\n*************Tree is Empty*************\n";
   break;
  case 4:
   if(!cTree.IsEmpty())
    {
     cout<<"\n************Preorder Travesal**********\n";
     cTree.Preorder(cTree.GetRoot());
    }
   else
    cout<<"\n*************Tree is Empty*************\n";
   break;
  case 5:
   if(!cTree.IsEmpty())
    {
     cout<<"\n************Postorder Travesal**********\n";
     cTree.Postorder(cTree.GetRoot());
    }
   else
    cout<<"\n*************Tree is Empty*************\n";
   break;
  case 6:
   cout<<"\n******************Thank You*****************\n";
   break;
  default:
   cout<<"\n************Invalid Option****************\n";
  }
 }while(nChoice!=6);
}



bash-3.2$ ./SET

*****************SET OPERATIONS****************

Give inputs for SET A: 

Elements in Tree A : 

Command Name: cp

Command Syntax: cp<source><destination>

Command Type: terminal

Command Description: to_copy_the_file

******Node Has been inserted Succesfully*********
Press Y to CONTINUE or Press N to STOP: y

Elements in Tree A : 

Command Name: rm

Command Syntax: <rm<file>

Command Type: terminal

Command Description: to_remove_the_file

******Node Has been inserted Succesfully*********
Press Y to CONTINUE or Press N to STOP: n

Command Name : cp
Syntax: cp<source><destination>
Type: terminal
Description: to_copy_the_file

Command Name : rm
Syntax: rm<file>
Type: terminal
Description: to_remove_the_file

Give inputs for SET B: 

Elements in Tree B : 

Command Name: ls

Command Syntax: ls<dir>

Command Type: terminal

Command Description: to_display_the_content

******Node Has been inserted Succesfully*********
Press Y to CONTINUE or Press N to STOP: y

Elements in Tree B : 

Command Name: finger

Command Syntax: finger<user>

Command Type: terminal

Command Description: display_about_the_user

******Node Has been inserted Succesfully*********
Press Y to CONTINUE or Press N to STOP: y

Elements in Tree B : 

Command Name: cp

Command Syntax: cp<source><destination>

Command Type: terminal

Command Description: to_copy_the_file

******Node Has been inserted Succesfully*********
Press Y to CONTINUE or Press N to STOP: n

Command Name : ls
Syntax: ls<dir>
Type: terminal
Description: to_display_the_content

Command Name : finger
Syntax: finger<user>
Type: terminal
Description: display_about_the_user

Command Name : cp
Syntax: cp<source><destination>
Type: terminal
Description: to_copy_the_file

*****************Union Operation************
1.To Perform Union Operation.
2.Search in Union Tree.
3.Inorder Traversal.
4.PreorderTraversal.
5.PostOrder.
6.Exit.
1

*************Union Operation Done***********
1.To Perform Union Operation.
2.Search in Union Tree.
3.Inorder Traversal.
4.PreorderTraversal.
5.PostOrder.
6.Exit.
4

************Preorder Travesal**********

Command Name : cp
Syntax: cp<source><destination>
Type: terminal
Description: to_copy_the_file

Command Name : rm
Syntax: rm<file>
Type: terminal
Description: to_remove_the_file

Command Name : ls
Syntax: ls<dir>
Type: terminal
Description: to_display_the_content

Command Name : finger
Syntax: finger<user>
Type: terminal
Description: display_about_the_user

1.To Perform Union Operation.
2.Search in Union Tree.
3.Inorder Traversal.
4.PreorderTraversal.
5.PostOrder.
6.Exit.
2
Name of the Command to search: rm

*******Node Found with the give Command*******
1.To Perform Union Operation.
2.Search in Union Tree.
3.Inorder Traversal.
4.PreorderTraversal.
5.PostOrder.
6.Exit.
2
Name of the Command to search: w

**************Node Not Found***********
1.To Perform Union Operation.
2.Search in Union Tree.
3.Inorder Traversal.
4.PreorderTraversal.
5.PostOrder.
6.Exit.
6

******************Thank You*****************
bash-3.2$ exit
exit

Script done on Wed 30 Sep 2015 03:32:46 PM IST
