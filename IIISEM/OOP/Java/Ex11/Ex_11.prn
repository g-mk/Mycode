Script started on Mon 02 Nov 2015 05:52:44 PM IST
bash-3.2$ mkdir locking
bash-3.2$ ls locking/
CDequeueRunnable.java  CEnqueueRunnable.java  CQueue.java
bash-3.2$ cat locking/CQueue.java
package locking;
import java.util.concurrent.locks.*;
import java.util.Scanner.*;
public class CQueue
{
    public CQueue(int nSize)
    {
        m_nQueue = new int[nSize];
        m_nFront= 0;
        m_nRear=-1;
        m_nSize=nSize;
        m_queuelock=new ReentrantLock();
        m_insertionwait = m_queuelock.newCondition(); 
        m_deletionwait = m_queuelock.newCondition();
    }
    public void enqueue(int nVal) throws InterruptedException 
    {
        //System.out.println("Enqueue:");
        m_queuelock.lock();
        try
        {
            
            while(m_nRear==m_nSize-1)
            {
                System.out.println(""+Thread.currentThread()+"Deletion await");
                m_deletionwait.await();
            }
            if(++m_nRear<m_nSize)
            {
                m_nQueue[m_nRear]=nVal;
                display();
                m_insertionwait.signalAll();
            }
        }
        finally
        {
            m_queuelock.unlock();
        }
        
    }
    public void dequeue() throws InterruptedException 
    {
        //System.out.println("Dequeue:");
        m_queuelock.lock();
        try
        {
            while(m_nRear<0)
            {
            	System.out.println(""+Thread.currentThread()+"Insertion await");
            	m_insertionwait.await();
            }
            m_nRear=m_nRear-1;
            for(int nLoop=0;nLoop<=m_nRear;nLoop++)
            {
                  m_nQueue[nLoop]=m_nQueue[nLoop+1];
            }
            display();
            m_deletionwait.signalAll();
        }
        finally
        {
            m_queuelock.unlock();
        }
    }
    public void display()
    {
        if(m_nRear>=0)
        {
            for(int nLoop=0;nLoop<=m_nRear;nLoop++)
            {
                System.out.printf("%d -> ", m_nQueue[nLoop]);
            }
            System.out.println("\n");
        }
        else
            System.out.println("Queue Empty");
    }
    private int []m_nQueue;
    private int m_nFront;
    private int m_nRear;
    private int m_nSize;
    private Lock m_queuelock;
    private Condition m_deletionwait;
    private Condition m_insertionwai;
}
bash-3.2$ cat locking/CEnqueueRunnable.java
package locking;
import java.io.*;
import java.util.*;
public class CEnqueueRunnable implements Runnable
{
    public CEnqueueRunnable(CQueue q)
    {
        m_nqueue = q;
    }
    public void run()
    {
        
        try
        {
             double nVal=50*Math.random();
             m_nqueue.enqueue((int)nVal);
             Thread.sleep(50);
        }
        catch(InterruptedException err)
        {
           
        }
        
    }
    private CQueue m_nqueue;
}
bash-3.2$ cat locking/CDequeueRunnable.java
package locking;
import java.io.*;
import java.util.*;
public class CDequeueRunnable implements Runnable
{
    public CDequeueRunnable(CQueue q)
    {
        m_nqueue = q;
    }
    public void run()
    {
        try
        {
            //int nLoop=10;
            //while(nLoop-->0)
           // {
             m_nqueue.dequeue();
             Thread.sleep(50);
            //}
        }
        catch(InterruptedException err)
        {
           
        } 
        
    }
    private CQueue m_nqueue;
}
bash-3.2$ mkdir synclock
bash-3.2$ ls synclock/
CSyncLock.java
bash-3.2$ cat sycnlock/CSyncLock.java
cat: sycnlock/CSyncLock.java: No such file or directory
bash-3.2$ cat synclock/CSyncLock.java
package synclock;
import locking.*;
import java.util.*;
public class CSyncLock
{
    public static void main(String []args)
    {
        Scanner in = new Scanner(System.in);
        System.out.printf("Enter the Size of Queue: ");
        int nSize = in.nextInt();
        CQueue queue = new CQueue (nSize);
        System.out.printf("Enter the Thread Count for Each Operation:");
        int nCount = in.nextInt();
        for(int nLoop=0;nLoop<nCount;nLoop++)
        {
            CEnqueueRunnable enqueuerun = new CEnqueueRunnable(queue);
            Thread t = new Thread(enqueuerun);
            t.start();
        }
        for(int nLoop=0;nLoop<nCount;nLoop++)
        {
            CDequeueRunnable dequeuerun = new CDequeueRunnable(queue);
            Thread t = new Thread(dequeuerun);
            t.start();
        }
        
    }
}
bash-3.2$ mkdir class
bash-3.2$ javac -d class synclock/CSyncLock.java
bash-3.2$ java -classpath class synclock.CSynclock
Enter the Size of Queue: 4
Enter the Thread Count for Each Operation:6
Thread[Thread-6,5,main]Insertion await
29 -> 

Queue Empty
Thread[Thread-8,5,main]Insertion await
Thread[Thread-9,5,main]Insertion await
Thread[Thread-10,5,main]Insertion await
Thread[Thread-11,5,main]Insertion await
6 -> 

6 -> 34 -> 

6 -> 34 -> 27 -> 

6 -> 34 -> 27 -> 26 -> 

Thread[Thread-2,5,main]Deletion await
34 -> 27 -> 26 -> 

27 -> 26 -> 

26 -> 

Queue Empty
Thread[Thread-11,5,main]Insertion await
43 -> 

Queue Empty
bash-3.2$ exit
exit

Script done on Mon 02 Nov 2015 05:56:10 PM IST
